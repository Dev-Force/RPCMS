√   Implement JSON-RPC 2.0 
    - (Partially done. Error Handling and data send to bussiness left)
    - DONE PREPARE Operations AND THEN COME BACK TO ADD ONE MORE VALIDATION 
    - Done

√   Create rest CRUD Operations to store Bussiness available methods.
    This will be used by the developer of the bussiness to register the methods.
    - Done

    - Can be later extended to use metaprogramming in order to pick all the classes and the methods
    of the system automatically (the problem is that we dont have a way to take the classes from    
    different programming languages without avoiding writing code for each language separately)
    ( NOT POSSIBLE !!! )

√ The above MUST be either local or restricted using 
    an IP address (req.ip either 127.0.0.1 or servers ip or something else specific)

√ Create Users and authentication for both clients(external) and employees(internal)
        THIS IS CONNECTED WITH THE LAST TODO (EXTERNAL WILL POSSIBLY BE A DESKTOP APP)

√ TODO: Create UI for Employees( UserController add CRUD UI )

√ TODO: Create Button Get All Remote Operations. (When the button is pressed backend makes a call to the central
        system API and saves all the operations returned to the database. Then it refreshes the operations page).

X TODO: Unit Testing

√ TODO: Allow External Users to Add their Own functionality

X TODO: Method Chaining


Optionals:

    X TODO: Create a mock shop and two mock partners of the shop to simulate a real example
    

Future Plans:
X Use LevelDB in order to make token invalidation possible and without transactions on a normal DB (Lower Cost)
- FrontEnd Group
    √ Transition to ReactJS or Angular2
    X Tranform Welcome Screen to a Dashboard
√ Give the ability to remote users to add functionality. (With admin verification of course) 
X User groups Implementation.



NEW:
- collect operations button
- optional params (namedParams) 
- create a route where all users can make requests through a gui to the jsonrpc api but only to the authorized operations 

- bug: delete access-token from storage before login in(when using ip if token is persisted the system is not working right) [DONE]
- Duplicate named param Fix [DONE, Not tested]
- ignore password if its empty [DONE]
- Finish operationDao for token based auth (homepage must contain the available operations, 
    operations table must contain only operations created by the specific admin) Fix angular2 templates (*ngIfs)
    [DONE]
- Code refactoring, includes mongoose promise using exec(), turn controller methods to higher order that return the corresponding functions 